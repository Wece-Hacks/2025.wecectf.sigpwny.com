{"success": true, "data": {"id": 5, "name": "XOR Cipher", "value": 900, "description": "Welcome to the **XOR Cipher Challenge**! In this challenge, you'll decode a given ciphertext by finding the correct key. This exercise will test your understanding of bitwise operations and character encoding.\n\n---\n\n## **Challenge Description**\n\nYou are provided with an encrypted message in hexadecimal format. The message was encrypted using a single-byte XOR cipher. Your goal is to identify the key used for encryption and decrypt the message.\n\n---\n\n## **Getting Started**\n\n### **Provided Code**\n\nHere's the starter code to help you begin:\n\n```python\nimport string\n\n# GOAL:\n# Decode the given ciphertext by finding the key\n\nciphertext_hex = \"4d5f595f525b595149594e5c41425548655349655c4f5447\"  # Given cipher text\nciphertext = bytes.fromhex(ciphertext_hex)  # Converts hex to bytes\n\n# HINT: \n# Helpful function to check if the result is readable ASCII\n# This function raises a UnicodeDecodeError for invalid UTF-8 sequences.\ndef is_printable_ascii(byte_array):\n    try:\n        message = byte_array.decode('utf-8')  # Decodes byte array to string using UTF-8 encoding\n        return all(c in string.printable for c in message)  # True if all characters are printable\n    except UnicodeDecodeError:\n        return False\n\n# Decrypt the message by finding the correct key\nfor key in range(256):\n    decrypted_message = bytes([c ^ key for c in ciphertext])\n\n    # Check if the decrypted message is readable\n    if is_printable_ascii(decrypted_message):\n        print(f\"Key: 0x{key:02X}\")\n        print(f\"Decrypted message: {decrypted_message.decode()}\")\n        print(\"-\" * 40)\n```\n\n### **Goal**\n\n- Your objective is to:\n  1. Write a script to iterate through all possible single-byte keys (0\u2013255).\n  2. Use XOR decryption to test each key.\n  3. Identify the correct key that produces a readable message.\n\n---\n\n## **Hints**\n\n1. **XOR Decryption**:\n  - For XOR encryption/decryption, the formula is:\n    \n    ```\n    decrypted_byte = encrypted_byte ^ key\n    ```\n\n2. **Key Characteristics**:\n  - The correct key will result in a decrypted message that contains only printable ASCII characters.\n\n3. **UTF-8 Decoding**:\n  - Use the `is_printable_ascii` function to ensure the decrypted message is readable.\n  - Invalid UTF-8 sequences will raise a `UnicodeDecodeError`.\n\n---\n\n## **Steps to Solve the Challenge**\n\n1. **Convert Ciphertext**:\n  - Convert the hexadecimal ciphertext to a byte array using:\n    ```python\n    bytes.fromhex(ciphertext_hex)\n    ```\n\n2. **Iterate Through Keys**:\n  - Loop through all 256 possible single-byte keys:\n    ```python\n    for key in range(256):\n    ```\n\n3. **Decrypt Using XOR**:\n  - Apply the XOR operation on each byte of the ciphertext:\n    ```python\n    decrypted_message = bytes([c ^ key for c in ciphertext])\n    ```\n\n4. **Check Readability**:\n  - Use the `is_printable_ascii` function to filter for readable results.\n\n5. **Output the Result**:\n  - Print the key and the decrypted message when a readable result is found.\n\n---\n\n## **Challenge Completion**\n\nOnce you identify the correct key and decrypt the ciphertext, you will obtain the flag in the format:\n\n```\nwecehacksctf{...}\n```\n\nGood luck, and enjoy the challenge!\n\n---\n\n## **Resources**\n\n- [XOR Encryption and Decryption](https://en.wikipedia.org/wiki/XOR_cipher)\n- [ASCII Table](https://www.asciitable.com/)\n", "connection_info": null, "next_id": null, "category": "Cryptography", "state": "visible", "max_attempts": 0, "type": "standard", "type_data": {"id": "standard", "name": "standard", "templates": {"create": "/plugins/challenges/assets/create.html", "update": "/plugins/challenges/assets/update.html", "view": "/plugins/challenges/assets/view.html"}, "scripts": {"create": "/plugins/challenges/assets/create.js", "update": "/plugins/challenges/assets/update.js", "view": "/plugins/challenges/assets/view.js"}}, "solves": 3, "solved_by_me": false, "attempts": 0, "files": ["/files/116e96d7ef838729cfe56b11c6b9fab7/main.py"], "tags": [], "hints": [], "view": "<div :class=\"getStyles()\" role=\"document\" x-data=\"Challenge\" x-init=\"id = 5; max_attempts = 0; attempts = 0\">\n  <div class=\"modal-content\">\n    <div class=\"modal-body py-4 px-4 px-sm-5\">\n\n      <div>\n        <button type=\"button\" class=\"btn-close float-end\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n\n        <ul class=\"nav nav-tabs\">\n          <li class=\"nav-item\">\n            <button class=\"nav-link active\" data-bs-target=\"#challenge\" @click=\"showChallenge()\">\n              Challenge\n            </button>\n          </li>\n\n          \n            <li class=\"nav-item\">\n              <button class=\"nav-link challenge-solves\" data-bs-target=\"#solves\" @click=\"showSolves()\">\n                \n                  3 Solves\n                \n              </button>\n            </li>\n          \n        </ul>\n      </div>\n\n      <div>\n        <div class=\"tab-content\">\n          <div role=\"tabpanel\" class=\"tab-pane fade show active\" id=\"challenge\">\n            <h2 class=\"challenge-name text-center pt-3\">\n              XOR Cipher\n            </h2>\n            <h3 class=\"challenge-value text-center\">\n              900\n            </h3>\n\n\n            \n\n            <span class=\"challenge-desc\"><p>Welcome to the <strong>XOR Cipher Challenge</strong>! In this challenge, you'll decode a given ciphertext by finding the correct key. This exercise will test your understanding of bitwise operations and character encoding.</p>\n<hr />\n<h2><strong>Challenge Description</strong></h2>\n<p>You are provided with an encrypted message in hexadecimal format. The message was encrypted using a single-byte XOR cipher. Your goal is to identify the key used for encryption and decrypt the message.</p>\n<hr />\n<h2><strong>Getting Started</strong></h2>\n<h3><strong>Provided Code</strong></h3>\n<p>Here's the starter code to help you begin:</p>\n<pre><code class=\"language-python\">import string\n\n# GOAL:\n# Decode the given ciphertext by finding the key\n\nciphertext_hex = &quot;4d5f595f525b595149594e5c41425548655349655c4f5447&quot;  # Given cipher text\nciphertext = bytes.fromhex(ciphertext_hex)  # Converts hex to bytes\n\n# HINT: \n# Helpful function to check if the result is readable ASCII\n# This function raises a UnicodeDecodeError for invalid UTF-8 sequences.\ndef is_printable_ascii(byte_array):\n    try:\n        message = byte_array.decode('utf-8')  # Decodes byte array to string using UTF-8 encoding\n        return all(c in string.printable for c in message)  # True if all characters are printable\n    except UnicodeDecodeError:\n        return False\n\n# Decrypt the message by finding the correct key\nfor key in range(256):\n    decrypted_message = bytes([c ^ key for c in ciphertext])\n\n    # Check if the decrypted message is readable\n    if is_printable_ascii(decrypted_message):\n        print(f&quot;Key: 0x{key:02X}&quot;)\n        print(f&quot;Decrypted message: {decrypted_message.decode()}&quot;)\n        print(&quot;-&quot; * 40)\n</code></pre>\n<h3><strong>Goal</strong></h3>\n<ul>\n<li>Your objective is to:\n<ol>\n<li>Write a script to iterate through all possible single-byte keys (0\u2013255).</li>\n<li>Use XOR decryption to test each key.</li>\n<li>Identify the correct key that produces a readable message.</li>\n</ol>\n</li>\n</ul>\n<hr />\n<h2><strong>Hints</strong></h2>\n<ol>\n<li><strong>XOR Decryption</strong>:</li>\n</ol>\n<ul>\n<li>\n<p>For XOR encryption/decryption, the formula is:</p>\n<pre><code>decrypted_byte = encrypted_byte ^ key\n</code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Key Characteristics</strong>:</li>\n</ol>\n<ul>\n<li>The correct key will result in a decrypted message that contains only printable ASCII characters.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>UTF-8 Decoding</strong>:</li>\n</ol>\n<ul>\n<li>Use the <code>is_printable_ascii</code> function to ensure the decrypted message is readable.</li>\n<li>Invalid UTF-8 sequences will raise a <code>UnicodeDecodeError</code>.</li>\n</ul>\n<hr />\n<h2><strong>Steps to Solve the Challenge</strong></h2>\n<ol>\n<li><strong>Convert Ciphertext</strong>:</li>\n</ol>\n<ul>\n<li>Convert the hexadecimal ciphertext to a byte array using:\n<pre><code class=\"language-python\">bytes.fromhex(ciphertext_hex)\n</code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Iterate Through Keys</strong>:</li>\n</ol>\n<ul>\n<li>Loop through all 256 possible single-byte keys:\n<pre><code class=\"language-python\">for key in range(256):\n</code></pre>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Decrypt Using XOR</strong>:</li>\n</ol>\n<ul>\n<li>Apply the XOR operation on each byte of the ciphertext:\n<pre><code class=\"language-python\">decrypted_message = bytes([c ^ key for c in ciphertext])\n</code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li><strong>Check Readability</strong>:</li>\n</ol>\n<ul>\n<li>Use the <code>is_printable_ascii</code> function to filter for readable results.</li>\n</ul>\n<ol start=\"5\">\n<li><strong>Output the Result</strong>:</li>\n</ol>\n<ul>\n<li>Print the key and the decrypted message when a readable result is found.</li>\n</ul>\n<hr />\n<h2><strong>Challenge Completion</strong></h2>\n<p>Once you identify the correct key and decrypt the ciphertext, you will obtain the flag in the format:</p>\n<pre><code>wecehacksctf{...}\n</code></pre>\n<p>Good luck, and enjoy the challenge!</p>\n<hr />\n<h2><strong>Resources</strong></h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/XOR_cipher\">XOR Encryption and Decryption</a></li>\n<li><a href=\"https://www.asciitable.com/\">ASCII Table</a></li>\n</ul>\n</span>\n\n            \n\n            \n\n            \n              <div class=\"row challenge-files text-center pb-3\">\n                \n                  <div class=\"col-md-4 col-sm-4 col-xs-12 file-button-wrapper d-block\">\n                    \n                    \n                    \n                      \n                    \n                    <a\n                        class=\"btn btn-info btn-file mb-1 d-inline-block px-2 w-100 text-truncate\"\n                        href=\"/files/116e96d7ef838729cfe56b11c6b9fab7/main.py\"\n                        title=\"main.py\"\n                    >\n                      <i class=\"fas fa-download\"></i>\n                      <small>\n                        main.py\n                      </small>\n                    </a>\n                  </div>\n                \n              </div>\n            \n\n            <template x-if=\"max_attempts > 0\">\n              <p class=\"text-center\">\n                <span x-text=\"attempts\"></span>/<span x-text=\"max_attempts\"></span> attempts\n              </p>\n            </template>\n\n            <div class=\"row submit-row\">\n              <div class=\"col-12 col-sm-8\">\n                \n                  <input\n                      id=\"challenge-id\" class=\"challenge-id\" type=\"hidden\"\n                      value=\"5\"\n                  >\n                  <input\n                      id=\"challenge-input\" class=\"challenge-input form-control\"\n                      type=\"text\" name=\"submission\"\n                      @keyup.enter=\"submitChallenge()\"\n                      placeholder=\"Flag\" x-model=\"submission\"\n                  >\n                \n              </div>\n\n              <div class=\"col-12 col-sm-4 mt-3 mt-sm-0 key-submit\">\n                \n                  <button\n                      id=\"challenge-submit\"\n                      class=\"challenge-submit btn btn-outline-secondary w-100 h-100\" type=\"submit\"\n                      @click.debounce.500ms=\"submitChallenge()\"\n                  >\n                    Submit\n                  </button>\n                \n              </div>\n            </div>\n\n            <div class=\"row notification-row\">\n              <div class=\"col-12\">\n                <template x-if=\"response\">\n                  \n                  <div class=\"alert text-center w-100 mt-3\"\n                      :class=\"{\n                        'alert-success': response.data.status == 'correct',\n                        'alert-info': response.data.status == 'already_solved',\n                        'alert-danger': response.data.status == 'incorrect',\n                      }\" role=\"alert\"\n                  >\n                    <strong x-text=\"response.data.message\"></strong>\n                    <div x-show=\"(response.data.status == 'correct' || response.data.status == 'already_solved')\">\n                      <div x-show=\"getNextId()\">\n                        <button @click=\"nextChallenge()\" class=\"btn btn-info mt-3\">\n                          Next Challenge\n                        </button>\n                      </div>\n                      \n                    </div>\n                  </div>\n                </template>\n              </div>\n            </div>\n          </div>\n\n          <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"solves\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <table class=\"table table-striped align-middle text-center\">\n                  <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Date</th>\n                  </tr>\n                  </thead>\n                  <tbody id=\"challenge-solves-names\">\n                  <template x-for=\"solve in solves\">\n                    <tr>\n                      <td>\n                        <a :href=\"solve.account_url\" x-text=\"solve.name\"></a>\n                      </td>\n                      <td x-text=\"solve.date\"></td>\n                    </tr>\n                  </template>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"}}
