{"success": true, "data": {"id": 1, "name": "Caesar Pie", "value": 500, "description": "Welcome to the **Caesar Pie Cipher Challenge**! In this challenge, you'll decrypt a message that has been encoded using a **modified Caesar cipher** where the shift pattern follows the **infinite digits of \u03c0 (pi)**. This challenge will test your understanding of cryptography, programming, and the properties of \u03c0.\n\n---\n\n## **Challenge Description**\n\nYou are given an encrypted message (**ciphertext**) and a partially completed Python script. The encryption method is similar to a **Caesar cipher**, but instead of a fixed shift, each letter is shifted by a different amount based on the digits of \u03c0.\n\nYour goal is to:\n- **Extract digits of \u03c0** using the provided `mpmath` library.\n- **Reverse the encryption process** by shifting each letter **backward** by the corresponding \u03c0 digit.\n- **Preserve special characters** (`{`, `}`, `_`, and spaces) without modifying them.\n- **Ensure proper wrapping** for uppercase (`A-Z`) and lowercase (`a-z`) letters.\n\n---\n\n## **Getting Started**\n\n### **Provided Code**\nYou are given the main.py python file to write your code in. \nIt also contains some hints on how to implement the decryption algorithm. \n\n## **Your Tasks**\n\n1. Implement get_pi_digits(n):\n    Extract at least n digits of \u03c0.\n    Ignore the decimal point and return them as a list of integers.\n\n2. Implement decrypt_pi_caesar(ciphertext):\n    Call get_pi_digits(n) to get the necessary \u03c0 digits.\n    Loop through ciphertext and shift each letter backward by the corresponding \u03c0 digit.\n    Ensure that special characters ({, }, _, and spaces) remain unchanged.\n    Properly wrap letters (e.g., shifting 'a' backward by 5 should wrap to 'v').\n\n## **Hints**\n\nUse the mpmath library to get more digits of \u03c0 than Python\u2019s built-in math library provides.\n\n```python\nfrom mpmath import mp\nmp.dps = 100  # Get at least 100 digits of \u03c0\nprint(str(mp.pi))  # See the first 100 digits\n```\n\nExtract \u03c0 digits as a list:\n\n```python\npi_digits = [int(d) for d in str(mp.pi).replace(\".\", \"\")[:n]]\n```\n\nReversing the shift:\n    For lowercase letters (a-z), shift backward in the alphabet.\n    For uppercase letters (A-Z), do the same.\n    Use the modulus operator (% 26) to handle wrapping.\n\n## **Challenge Completion***\n\nOnce you successfully decrypt the message, you will obtain the flag in the format:\n\n```\nwecehacksctf{FLAG}\n```\n\nGood luck, and have fun decrypting \u03c0-powered cryptography! \ud83d\ude80\n\n\n### **Resources**\n\n- [Caesar Cipher Explanation](https://en.wikipedia.org/wiki/Caesar_cipher)\n- [Pi Digits Generator (mpmath)](https://mpmath.org/)\n- [ASCII Table](https://www.asciitable.com/)\n", "connection_info": null, "next_id": null, "category": "Cryptography", "state": "visible", "max_attempts": 0, "type": "standard", "type_data": {"id": "standard", "name": "standard", "templates": {"create": "/plugins/challenges/assets/create.html", "update": "/plugins/challenges/assets/update.html", "view": "/plugins/challenges/assets/view.html"}, "scripts": {"create": "/plugins/challenges/assets/create.js", "update": "/plugins/challenges/assets/update.js", "view": "/plugins/challenges/assets/view.js"}}, "solves": 3, "solved_by_me": false, "attempts": 0, "files": ["/files/303bc9b005e45ce43675e58920353fc8/main.py"], "tags": [], "hints": [], "view": "<div :class=\"getStyles()\" role=\"document\" x-data=\"Challenge\" x-init=\"id = 1; max_attempts = 0; attempts = 0\">\n  <div class=\"modal-content\">\n    <div class=\"modal-body py-4 px-4 px-sm-5\">\n\n      <div>\n        <button type=\"button\" class=\"btn-close float-end\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n\n        <ul class=\"nav nav-tabs\">\n          <li class=\"nav-item\">\n            <button class=\"nav-link active\" data-bs-target=\"#challenge\" @click=\"showChallenge()\">\n              Challenge\n            </button>\n          </li>\n\n          \n            <li class=\"nav-item\">\n              <button class=\"nav-link challenge-solves\" data-bs-target=\"#solves\" @click=\"showSolves()\">\n                \n                  3 Solves\n                \n              </button>\n            </li>\n          \n        </ul>\n      </div>\n\n      <div>\n        <div class=\"tab-content\">\n          <div role=\"tabpanel\" class=\"tab-pane fade show active\" id=\"challenge\">\n            <h2 class=\"challenge-name text-center pt-3\">\n              Caesar Pie\n            </h2>\n            <h3 class=\"challenge-value text-center\">\n              500\n            </h3>\n\n\n            \n\n            <span class=\"challenge-desc\"><p>Welcome to the <strong>Caesar Pie Cipher Challenge</strong>! In this challenge, you'll decrypt a message that has been encoded using a <strong>modified Caesar cipher</strong> where the shift pattern follows the <strong>infinite digits of \u03c0 (pi)</strong>. This challenge will test your understanding of cryptography, programming, and the properties of \u03c0.</p>\n<hr />\n<h2><strong>Challenge Description</strong></h2>\n<p>You are given an encrypted message (<strong>ciphertext</strong>) and a partially completed Python script. The encryption method is similar to a <strong>Caesar cipher</strong>, but instead of a fixed shift, each letter is shifted by a different amount based on the digits of \u03c0.</p>\n<p>Your goal is to:</p>\n<ul>\n<li><strong>Extract digits of \u03c0</strong> using the provided <code>mpmath</code> library.</li>\n<li><strong>Reverse the encryption process</strong> by shifting each letter <strong>backward</strong> by the corresponding \u03c0 digit.</li>\n<li><strong>Preserve special characters</strong> (<code>{</code>, <code>}</code>, <code>_</code>, and spaces) without modifying them.</li>\n<li><strong>Ensure proper wrapping</strong> for uppercase (<code>A-Z</code>) and lowercase (<code>a-z</code>) letters.</li>\n</ul>\n<hr />\n<h2><strong>Getting Started</strong></h2>\n<h3><strong>Provided Code</strong></h3>\n<p>You are given the main.py python file to write your code in.\nIt also contains some hints on how to implement the decryption algorithm.</p>\n<h2><strong>Your Tasks</strong></h2>\n<ol>\n<li>\n<p>Implement get_pi_digits(n):\nExtract at least n digits of \u03c0.\nIgnore the decimal point and return them as a list of integers.</p>\n</li>\n<li>\n<p>Implement decrypt_pi_caesar(ciphertext):\nCall get_pi_digits(n) to get the necessary \u03c0 digits.\nLoop through ciphertext and shift each letter backward by the corresponding \u03c0 digit.\nEnsure that special characters ({, }, _, and spaces) remain unchanged.\nProperly wrap letters (e.g., shifting 'a' backward by 5 should wrap to 'v').</p>\n</li>\n</ol>\n<h2><strong>Hints</strong></h2>\n<p>Use the mpmath library to get more digits of \u03c0 than Python\u2019s built-in math library provides.</p>\n<pre><code class=\"language-python\">from mpmath import mp\nmp.dps = 100  # Get at least 100 digits of \u03c0\nprint(str(mp.pi))  # See the first 100 digits\n</code></pre>\n<p>Extract \u03c0 digits as a list:</p>\n<pre><code class=\"language-python\">pi_digits = [int(d) for d in str(mp.pi).replace(&quot;.&quot;, &quot;&quot;)[:n]]\n</code></pre>\n<p>Reversing the shift:\nFor lowercase letters (a-z), shift backward in the alphabet.\nFor uppercase letters (A-Z), do the same.\nUse the modulus operator (% 26) to handle wrapping.</p>\n<h2><strong>Challenge Completion</strong>*</h2>\n<p>Once you successfully decrypt the message, you will obtain the flag in the format:</p>\n<pre><code>wecehacksctf{FLAG}\n</code></pre>\n<p>Good luck, and have fun decrypting \u03c0-powered cryptography! \ud83d\ude80</p>\n<h3><strong>Resources</strong></h3>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Caesar_cipher\">Caesar Cipher Explanation</a></li>\n<li><a href=\"https://mpmath.org/\">Pi Digits Generator (mpmath)</a></li>\n<li><a href=\"https://www.asciitable.com/\">ASCII Table</a></li>\n</ul>\n</span>\n\n            \n\n            \n\n            \n              <div class=\"row challenge-files text-center pb-3\">\n                \n                  <div class=\"col-md-4 col-sm-4 col-xs-12 file-button-wrapper d-block\">\n                    \n                    \n                    \n                      \n                    \n                    <a\n                        class=\"btn btn-info btn-file mb-1 d-inline-block px-2 w-100 text-truncate\"\n                        href=\"/files/303bc9b005e45ce43675e58920353fc8/main.py\"\n                        title=\"main.py\"\n                    >\n                      <i class=\"fas fa-download\"></i>\n                      <small>\n                        main.py\n                      </small>\n                    </a>\n                  </div>\n                \n              </div>\n            \n\n            <template x-if=\"max_attempts > 0\">\n              <p class=\"text-center\">\n                <span x-text=\"attempts\"></span>/<span x-text=\"max_attempts\"></span> attempts\n              </p>\n            </template>\n\n            <div class=\"row submit-row\">\n              <div class=\"col-12 col-sm-8\">\n                \n                  <input\n                      id=\"challenge-id\" class=\"challenge-id\" type=\"hidden\"\n                      value=\"1\"\n                  >\n                  <input\n                      id=\"challenge-input\" class=\"challenge-input form-control\"\n                      type=\"text\" name=\"submission\"\n                      @keyup.enter=\"submitChallenge()\"\n                      placeholder=\"Flag\" x-model=\"submission\"\n                  >\n                \n              </div>\n\n              <div class=\"col-12 col-sm-4 mt-3 mt-sm-0 key-submit\">\n                \n                  <button\n                      id=\"challenge-submit\"\n                      class=\"challenge-submit btn btn-outline-secondary w-100 h-100\" type=\"submit\"\n                      @click.debounce.500ms=\"submitChallenge()\"\n                  >\n                    Submit\n                  </button>\n                \n              </div>\n            </div>\n\n            <div class=\"row notification-row\">\n              <div class=\"col-12\">\n                <template x-if=\"response\">\n                  \n                  <div class=\"alert text-center w-100 mt-3\"\n                      :class=\"{\n                        'alert-success': response.data.status == 'correct',\n                        'alert-info': response.data.status == 'already_solved',\n                        'alert-danger': response.data.status == 'incorrect',\n                      }\" role=\"alert\"\n                  >\n                    <strong x-text=\"response.data.message\"></strong>\n                    <div x-show=\"(response.data.status == 'correct' || response.data.status == 'already_solved')\">\n                      <div x-show=\"getNextId()\">\n                        <button @click=\"nextChallenge()\" class=\"btn btn-info mt-3\">\n                          Next Challenge\n                        </button>\n                      </div>\n                      \n                    </div>\n                  </div>\n                </template>\n              </div>\n            </div>\n          </div>\n\n          <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"solves\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <table class=\"table table-striped align-middle text-center\">\n                  <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Date</th>\n                  </tr>\n                  </thead>\n                  <tbody id=\"challenge-solves-names\">\n                  <template x-for=\"solve in solves\">\n                    <tr>\n                      <td>\n                        <a :href=\"solve.account_url\" x-text=\"solve.name\"></a>\n                      </td>\n                      <td x-text=\"solve.date\"></td>\n                    </tr>\n                  </template>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"}}
