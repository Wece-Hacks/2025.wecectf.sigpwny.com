{"success": true, "data": {"id": 10, "name": "LSB Extraction", "value": 700, "description": "Welcome to the **LSB OSINT Challenge**! This challenge tests your ability to extract hidden information from an image using Python programming and basic image manipulation techniques.\n\n---\n\n## **Challenge Description**\n\nYou have been given an image file, `hidden_message.png`, which contains a hidden message embedded in the **least significant bits (LSB)** of the red color channel. Your task is to write a Python script to extract and decode the hidden message.\n\n---\n\n## **Getting Started**\n\n1. **Prerequisites**:\n  - Basic knowledge of Python programming.\n  - Familiarity with the concept of LSB steganography.\n  - Python libraries:\n    - `Pillow` (for image manipulation).\n\n  To install Pillow, run:\n  ```bash\n  pip install pillow\n  ```\n\n2. **Provided Files**:\n  - `hidden_message.png`: The image containing the hidden message.\n\n3. **Objective**:\n  - Write a Python script to:\n    1. Open and read the image file.\n    2. Extract the LSBs from the red color channel of each pixel.\n    3. Reconstruct the hidden message from the extracted binary data.\n\n---\n\n## **Hints**\n\n- The message is encoded in the red channel's least significant bit (LSB) of each pixel.\n- Group binary bits in chunks of 8 to convert them into readable ASCII characters.\n- The message ends with a null character (`\\0`), so stop decoding when you reach it.\n\n---\n\n## **Solution Walkthrough**\n\nHere\u2019s an outline of how you can solve the challenge:\n\n1. **Open the Image**:\n  Use the `Pillow` library to load and access pixel data:\n  ```python\n  from PIL import Image\n  img = Image.open('hidden_message.png')\n  pixels = list(img.getdata())\n  ```\n\n2. **Extract the LSBs**:\n  Write this code in main.py\n\n3. **Decode the Message**:\n  Write this code in main.py\n\n4. **Run the Script**:\n  Save your script and run it:\n  ```bash\n  python main.py\n  ```\n\n---\n\n## **Challenge Completion**\n\nOnce you successfully decode the message, you will see a flag in the format:\n\n```\nwecehacksctf{...}\n```\n\nGood luck, and have fun exploring the world of OSINT and steganography!\n\n---\n\n## **Resources**\n\n- [Python Pillow Documentation](https://pillow.readthedocs.io/)\n- [Introduction to Steganography](https://en.wikipedia.org/wiki/Steganography) \n", "connection_info": null, "next_id": null, "category": "OSINT", "state": "visible", "max_attempts": 0, "type": "standard", "type_data": {"id": "standard", "name": "standard", "templates": {"create": "/plugins/challenges/assets/create.html", "update": "/plugins/challenges/assets/update.html", "view": "/plugins/challenges/assets/view.html"}, "scripts": {"create": "/plugins/challenges/assets/create.js", "update": "/plugins/challenges/assets/update.js", "view": "/plugins/challenges/assets/view.js"}}, "solves": 3, "solved_by_me": false, "attempts": 0, "files": ["/files/b659473f824ee06e24e984e383afaa37/hidden_message.png", "/files/93c9d70a77f4b8901d70e6c7cb4e96fc/main.py"], "tags": [], "hints": [], "view": "<div :class=\"getStyles()\" role=\"document\" x-data=\"Challenge\" x-init=\"id = 10; max_attempts = 0; attempts = 0\">\n  <div class=\"modal-content\">\n    <div class=\"modal-body py-4 px-4 px-sm-5\">\n\n      <div>\n        <button type=\"button\" class=\"btn-close float-end\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n\n        <ul class=\"nav nav-tabs\">\n          <li class=\"nav-item\">\n            <button class=\"nav-link active\" data-bs-target=\"#challenge\" @click=\"showChallenge()\">\n              Challenge\n            </button>\n          </li>\n\n          \n            <li class=\"nav-item\">\n              <button class=\"nav-link challenge-solves\" data-bs-target=\"#solves\" @click=\"showSolves()\">\n                \n                  3 Solves\n                \n              </button>\n            </li>\n          \n        </ul>\n      </div>\n\n      <div>\n        <div class=\"tab-content\">\n          <div role=\"tabpanel\" class=\"tab-pane fade show active\" id=\"challenge\">\n            <h2 class=\"challenge-name text-center pt-3\">\n              LSB Extraction\n            </h2>\n            <h3 class=\"challenge-value text-center\">\n              700\n            </h3>\n\n\n            \n\n            <span class=\"challenge-desc\"><p>Welcome to the <strong>LSB OSINT Challenge</strong>! This challenge tests your ability to extract hidden information from an image using Python programming and basic image manipulation techniques.</p>\n<hr />\n<h2><strong>Challenge Description</strong></h2>\n<p>You have been given an image file, <code>hidden_message.png</code>, which contains a hidden message embedded in the <strong>least significant bits (LSB)</strong> of the red color channel. Your task is to write a Python script to extract and decode the hidden message.</p>\n<hr />\n<h2><strong>Getting Started</strong></h2>\n<ol>\n<li><strong>Prerequisites</strong>:</li>\n</ol>\n<ul>\n<li>Basic knowledge of Python programming.</li>\n<li>Familiarity with the concept of LSB steganography.</li>\n<li>Python libraries:\n<ul>\n<li><code>Pillow</code> (for image manipulation).</li>\n</ul>\n</li>\n</ul>\n<p>To install Pillow, run:</p>\n<pre><code class=\"language-bash\">pip install pillow\n</code></pre>\n<ol start=\"2\">\n<li><strong>Provided Files</strong>:</li>\n</ol>\n<ul>\n<li><code>hidden_message.png</code>: The image containing the hidden message.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Objective</strong>:</li>\n</ol>\n<ul>\n<li>Write a Python script to:\n<ol>\n<li>Open and read the image file.</li>\n<li>Extract the LSBs from the red color channel of each pixel.</li>\n<li>Reconstruct the hidden message from the extracted binary data.</li>\n</ol>\n</li>\n</ul>\n<hr />\n<h2><strong>Hints</strong></h2>\n<ul>\n<li>The message is encoded in the red channel's least significant bit (LSB) of each pixel.</li>\n<li>Group binary bits in chunks of 8 to convert them into readable ASCII characters.</li>\n<li>The message ends with a null character (<code>\\0</code>), so stop decoding when you reach it.</li>\n</ul>\n<hr />\n<h2><strong>Solution Walkthrough</strong></h2>\n<p>Here\u2019s an outline of how you can solve the challenge:</p>\n<ol>\n<li><strong>Open the Image</strong>:\nUse the <code>Pillow</code> library to load and access pixel data:</li>\n</ol>\n<pre><code class=\"language-python\">from PIL import Image\nimg = Image.open('hidden_message.png')\npixels = list(img.getdata())\n</code></pre>\n<ol start=\"2\">\n<li>\n<p><strong>Extract the LSBs</strong>:\nWrite this code in main.py</p>\n</li>\n<li>\n<p><strong>Decode the Message</strong>:\nWrite this code in main.py</p>\n</li>\n<li>\n<p><strong>Run the Script</strong>:\nSave your script and run it:</p>\n</li>\n</ol>\n<pre><code class=\"language-bash\">python main.py\n</code></pre>\n<hr />\n<h2><strong>Challenge Completion</strong></h2>\n<p>Once you successfully decode the message, you will see a flag in the format:</p>\n<pre><code>wecehacksctf{...}\n</code></pre>\n<p>Good luck, and have fun exploring the world of OSINT and steganography!</p>\n<hr />\n<h2><strong>Resources</strong></h2>\n<ul>\n<li><a href=\"https://pillow.readthedocs.io/\">Python Pillow Documentation</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Steganography\">Introduction to Steganography</a></li>\n</ul>\n</span>\n\n            \n\n            \n\n            \n              <div class=\"row challenge-files text-center pb-3\">\n                \n                  <div class=\"col-md-4 col-sm-4 col-xs-12 file-button-wrapper d-block\">\n                    \n                    \n                    \n                      \n                    \n                    <a\n                        class=\"btn btn-info btn-file mb-1 d-inline-block px-2 w-100 text-truncate\"\n                        href=\"/files/b659473f824ee06e24e984e383afaa37/hidden_message.png\"\n                        title=\"hidden_message.png\"\n                    >\n                      <i class=\"fas fa-download\"></i>\n                      <small>\n                        hidden_message.png\n                      </small>\n                    </a>\n                  </div>\n                \n                  <div class=\"col-md-4 col-sm-4 col-xs-12 file-button-wrapper d-block\">\n                    \n                    \n                    \n                      \n                    \n                    <a\n                        class=\"btn btn-info btn-file mb-1 d-inline-block px-2 w-100 text-truncate\"\n                        href=\"/files/93c9d70a77f4b8901d70e6c7cb4e96fc/main.py\"\n                        title=\"main.py\"\n                    >\n                      <i class=\"fas fa-download\"></i>\n                      <small>\n                        main.py\n                      </small>\n                    </a>\n                  </div>\n                \n              </div>\n            \n\n            <template x-if=\"max_attempts > 0\">\n              <p class=\"text-center\">\n                <span x-text=\"attempts\"></span>/<span x-text=\"max_attempts\"></span> attempts\n              </p>\n            </template>\n\n            <div class=\"row submit-row\">\n              <div class=\"col-12 col-sm-8\">\n                \n                  <input\n                      id=\"challenge-id\" class=\"challenge-id\" type=\"hidden\"\n                      value=\"10\"\n                  >\n                  <input\n                      id=\"challenge-input\" class=\"challenge-input form-control\"\n                      type=\"text\" name=\"submission\"\n                      @keyup.enter=\"submitChallenge()\"\n                      placeholder=\"Flag\" x-model=\"submission\"\n                  >\n                \n              </div>\n\n              <div class=\"col-12 col-sm-4 mt-3 mt-sm-0 key-submit\">\n                \n                  <button\n                      id=\"challenge-submit\"\n                      class=\"challenge-submit btn btn-outline-secondary w-100 h-100\" type=\"submit\"\n                      @click.debounce.500ms=\"submitChallenge()\"\n                  >\n                    Submit\n                  </button>\n                \n              </div>\n            </div>\n\n            <div class=\"row notification-row\">\n              <div class=\"col-12\">\n                <template x-if=\"response\">\n                  \n                  <div class=\"alert text-center w-100 mt-3\"\n                      :class=\"{\n                        'alert-success': response.data.status == 'correct',\n                        'alert-info': response.data.status == 'already_solved',\n                        'alert-danger': response.data.status == 'incorrect',\n                      }\" role=\"alert\"\n                  >\n                    <strong x-text=\"response.data.message\"></strong>\n                    <div x-show=\"(response.data.status == 'correct' || response.data.status == 'already_solved')\">\n                      <div x-show=\"getNextId()\">\n                        <button @click=\"nextChallenge()\" class=\"btn btn-info mt-3\">\n                          Next Challenge\n                        </button>\n                      </div>\n                      \n                    </div>\n                  </div>\n                </template>\n              </div>\n            </div>\n          </div>\n\n          <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"solves\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <table class=\"table table-striped align-middle text-center\">\n                  <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Date</th>\n                  </tr>\n                  </thead>\n                  <tbody id=\"challenge-solves-names\">\n                  <template x-for=\"solve in solves\">\n                    <tr>\n                      <td>\n                        <a :href=\"solve.account_url\" x-text=\"solve.name\"></a>\n                      </td>\n                      <td x-text=\"solve.date\"></td>\n                    </tr>\n                  </template>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"}}
