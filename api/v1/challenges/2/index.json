{"success": true, "data": {"id": 2, "name": "RSA Encryption", "value": 700, "description": "Welcome to the **RSA Encryption Challenge**! Your task is to decrypt an encrypted message using the RSA algorithm. This challenge will test your understanding of RSA encryption and your ability to implement modular arithmetic in Python.\n\n---\n\n## **Challenge Description**\n\nRSA encryption is one of the most widely used encryption techniques in cryptography. In this challenge, you are given:\n\n- Two prime numbers: `p` and `q`.\n- A public key exponent: `e`.\n- An encrypted message: a list of integers (`encrypted_chars`).\n\nYour goal is to decrypt the message using RSA decryption to retrieve the flag. The decrypted message is a **link to a video**. The flag is the **title of the video**.\n\n---\n\n## **Getting Started**\n\n### **Prerequisites**\n\n- Knowledge of RSA encryption and decryption principles.\n- to learn more about RSA encryption, check out the following link: \n  # https://www.youtube.com/watch?v=wcbH4t5SJpg\n- Basic Python programming skills.\n- Install the `sympy` library for modular arithmetic:\n\n  ```bash\n  pip install sympy\n  ```\n\n### **Provided Files**\n\n1. **Challenge Code**:\n  ```python\n  # HINT: use \"pip install sympy\" to use the mod_inverse function\n  from sympy import mod_inverse \n\n  # given values p, q, and e for RSA encryption\n  p = 61\n  q = 53\n  e = 17\n\n  # decrypt each character in the message to get the flag\n  # HINT: it should be a link\n  encrypted_chars = [2170, 884, 884, 612, 1230, 436, 501, 501, 884, 3179, 2235, 487, 2160, 2412, 745, 2825, 281, 2185, 2271, 501, 1107, 1313, 281, 1313, 745, 2185, 745]\n  ```\n\n2. **Values to Work With**:\n  - `p = 61`\n  - `q = 53`\n  - `e = 17`\n\n3. **Objective**:\n  - Use the above values to decrypt `encrypted_chars` and extract the hidden message.\n\n---\n\n## **Steps to Solve the Challenge**\n\n1. **Understand RSA Decryption**:\n  - Calculate \\( n = p \\times q \\).\n  - Calculate \\( \\phi(n) = (p - 1) \\times (q - 1) \\).\n  - Compute the private key \\( d \\) as the modular inverse of \\( e \\) modulo \\( \\phi(n) \\):\n    \n    ```python\n    d = mod_inverse(e, phi_n)\n    ```\n\n2. **Decrypt Each Character**:\n  - For each encrypted character \\( c \\) in `encrypted_chars`, decrypt it using the formula:\n    \n    ```python\n    decrypted_char = pow(c, d, n)\n    ```\n\n3. **Convert to Text**:\n  - Convert the decrypted integers into their ASCII character equivalents using:\n    \n    ```python\n    chr(decrypted_char)\n    ```\n\n4. **Retrieve the Flag**:\n  - Combine the characters into a string and use the link to find the video title.\n\n---\n\n## **Hints**\n\n- The `mod_inverse` function from the `sympy` library will help you calculate the modular inverse.\n- Stop decoding when you retrieve a full readable message.\n- Use the provided link to verify your result and find the flag.\n\n---\n\n## **Challenge Completion**\n\n**THIS IS VERY IMPORTANT!!!**\nOnce you decrypt the message, you will obtain a link to a video. The **flag** is in the title of that video!\n\nIn the format:\n\n```\nwecehacksctf{FLAG}\n```\n\nGood luck and happy decrypting!\n\n---\n\n## **Resources**\n\n- [RSA Encryption Explained (YouTube)](https://www.youtube.com/watch?v=wcbH4t5SJpg)\n- [Sympy Documentation](https://docs.sympy.org/)\n", "connection_info": null, "next_id": null, "category": "Cryptography", "state": "visible", "max_attempts": 0, "type": "standard", "type_data": {"id": "standard", "name": "standard", "templates": {"create": "/plugins/challenges/assets/create.html", "update": "/plugins/challenges/assets/update.html", "view": "/plugins/challenges/assets/view.html"}, "scripts": {"create": "/plugins/challenges/assets/create.js", "update": "/plugins/challenges/assets/update.js", "view": "/plugins/challenges/assets/view.js"}}, "solves": 3, "solved_by_me": false, "attempts": 0, "files": ["/files/6dc13966b44840fb6d7c85cfc596d18f/main.py"], "tags": [], "hints": [], "view": "<div :class=\"getStyles()\" role=\"document\" x-data=\"Challenge\" x-init=\"id = 2; max_attempts = 0; attempts = 0\">\n  <div class=\"modal-content\">\n    <div class=\"modal-body py-4 px-4 px-sm-5\">\n\n      <div>\n        <button type=\"button\" class=\"btn-close float-end\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n\n        <ul class=\"nav nav-tabs\">\n          <li class=\"nav-item\">\n            <button class=\"nav-link active\" data-bs-target=\"#challenge\" @click=\"showChallenge()\">\n              Challenge\n            </button>\n          </li>\n\n          \n            <li class=\"nav-item\">\n              <button class=\"nav-link challenge-solves\" data-bs-target=\"#solves\" @click=\"showSolves()\">\n                \n                  3 Solves\n                \n              </button>\n            </li>\n          \n        </ul>\n      </div>\n\n      <div>\n        <div class=\"tab-content\">\n          <div role=\"tabpanel\" class=\"tab-pane fade show active\" id=\"challenge\">\n            <h2 class=\"challenge-name text-center pt-3\">\n              RSA Encryption\n            </h2>\n            <h3 class=\"challenge-value text-center\">\n              700\n            </h3>\n\n\n            \n\n            <span class=\"challenge-desc\"><p>Welcome to the <strong>RSA Encryption Challenge</strong>! Your task is to decrypt an encrypted message using the RSA algorithm. This challenge will test your understanding of RSA encryption and your ability to implement modular arithmetic in Python.</p>\n<hr />\n<h2><strong>Challenge Description</strong></h2>\n<p>RSA encryption is one of the most widely used encryption techniques in cryptography. In this challenge, you are given:</p>\n<ul>\n<li>Two prime numbers: <code>p</code> and <code>q</code>.</li>\n<li>A public key exponent: <code>e</code>.</li>\n<li>An encrypted message: a list of integers (<code>encrypted_chars</code>).</li>\n</ul>\n<p>Your goal is to decrypt the message using RSA decryption to retrieve the flag. The decrypted message is a <strong>link to a video</strong>. The flag is the <strong>title of the video</strong>.</p>\n<hr />\n<h2><strong>Getting Started</strong></h2>\n<h3><strong>Prerequisites</strong></h3>\n<ul>\n<li>\n<p>Knowledge of RSA encryption and decryption principles.</p>\n</li>\n<li>\n<p>to learn more about RSA encryption, check out the following link:</p>\n<h1><a href=\"https://www.youtube.com/watch?v=wcbH4t5SJpg\">https://www.youtube.com/watch?v=wcbH4t5SJpg</a></h1>\n</li>\n<li>\n<p>Basic Python programming skills.</p>\n</li>\n<li>\n<p>Install the <code>sympy</code> library for modular arithmetic:</p>\n<pre><code class=\"language-bash\">pip install sympy\n</code></pre>\n</li>\n</ul>\n<h3><strong>Provided Files</strong></h3>\n<ol>\n<li><strong>Challenge Code</strong>:</li>\n</ol>\n<pre><code class=\"language-python\"># HINT: use &quot;pip install sympy&quot; to use the mod_inverse function\nfrom sympy import mod_inverse \n\n# given values p, q, and e for RSA encryption\np = 61\nq = 53\ne = 17\n\n# decrypt each character in the message to get the flag\n# HINT: it should be a link\nencrypted_chars = [2170, 884, 884, 612, 1230, 436, 501, 501, 884, 3179, 2235, 487, 2160, 2412, 745, 2825, 281, 2185, 2271, 501, 1107, 1313, 281, 1313, 745, 2185, 745]\n</code></pre>\n<ol start=\"2\">\n<li><strong>Values to Work With</strong>:</li>\n</ol>\n<ul>\n<li><code>p = 61</code></li>\n<li><code>q = 53</code></li>\n<li><code>e = 17</code></li>\n</ul>\n<ol start=\"3\">\n<li><strong>Objective</strong>:</li>\n</ol>\n<ul>\n<li>Use the above values to decrypt <code>encrypted_chars</code> and extract the hidden message.</li>\n</ul>\n<hr />\n<h2><strong>Steps to Solve the Challenge</strong></h2>\n<ol>\n<li><strong>Understand RSA Decryption</strong>:</li>\n</ol>\n<ul>\n<li>\n<p>Calculate ( n = p \\times q ).</p>\n</li>\n<li>\n<p>Calculate ( \\phi(n) = (p - 1) \\times (q - 1) ).</p>\n</li>\n<li>\n<p>Compute the private key ( d ) as the modular inverse of ( e ) modulo ( \\phi(n) ):</p>\n<pre><code class=\"language-python\">d = mod_inverse(e, phi_n)\n</code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Decrypt Each Character</strong>:</li>\n</ol>\n<ul>\n<li>\n<p>For each encrypted character ( c ) in <code>encrypted_chars</code>, decrypt it using the formula:</p>\n<pre><code class=\"language-python\">decrypted_char = pow(c, d, n)\n</code></pre>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Convert to Text</strong>:</li>\n</ol>\n<ul>\n<li>\n<p>Convert the decrypted integers into their ASCII character equivalents using:</p>\n<pre><code class=\"language-python\">chr(decrypted_char)\n</code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li><strong>Retrieve the Flag</strong>:</li>\n</ol>\n<ul>\n<li>Combine the characters into a string and use the link to find the video title.</li>\n</ul>\n<hr />\n<h2><strong>Hints</strong></h2>\n<ul>\n<li>The <code>mod_inverse</code> function from the <code>sympy</code> library will help you calculate the modular inverse.</li>\n<li>Stop decoding when you retrieve a full readable message.</li>\n<li>Use the provided link to verify your result and find the flag.</li>\n</ul>\n<hr />\n<h2><strong>Challenge Completion</strong></h2>\n<p><strong>THIS IS VERY IMPORTANT!!!</strong>\nOnce you decrypt the message, you will obtain a link to a video. The <strong>flag</strong> is in the title of that video!</p>\n<p>In the format:</p>\n<pre><code>wecehacksctf{FLAG}\n</code></pre>\n<p>Good luck and happy decrypting!</p>\n<hr />\n<h2><strong>Resources</strong></h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=wcbH4t5SJpg\">RSA Encryption Explained (YouTube)</a></li>\n<li><a href=\"https://docs.sympy.org/\">Sympy Documentation</a></li>\n</ul>\n</span>\n\n            \n\n            \n\n            \n              <div class=\"row challenge-files text-center pb-3\">\n                \n                  <div class=\"col-md-4 col-sm-4 col-xs-12 file-button-wrapper d-block\">\n                    \n                    \n                    \n                      \n                    \n                    <a\n                        class=\"btn btn-info btn-file mb-1 d-inline-block px-2 w-100 text-truncate\"\n                        href=\"/files/6dc13966b44840fb6d7c85cfc596d18f/main.py\"\n                        title=\"main.py\"\n                    >\n                      <i class=\"fas fa-download\"></i>\n                      <small>\n                        main.py\n                      </small>\n                    </a>\n                  </div>\n                \n              </div>\n            \n\n            <template x-if=\"max_attempts > 0\">\n              <p class=\"text-center\">\n                <span x-text=\"attempts\"></span>/<span x-text=\"max_attempts\"></span> attempts\n              </p>\n            </template>\n\n            <div class=\"row submit-row\">\n              <div class=\"col-12 col-sm-8\">\n                \n                  <input\n                      id=\"challenge-id\" class=\"challenge-id\" type=\"hidden\"\n                      value=\"2\"\n                  >\n                  <input\n                      id=\"challenge-input\" class=\"challenge-input form-control\"\n                      type=\"text\" name=\"submission\"\n                      @keyup.enter=\"submitChallenge()\"\n                      placeholder=\"Flag\" x-model=\"submission\"\n                  >\n                \n              </div>\n\n              <div class=\"col-12 col-sm-4 mt-3 mt-sm-0 key-submit\">\n                \n                  <button\n                      id=\"challenge-submit\"\n                      class=\"challenge-submit btn btn-outline-secondary w-100 h-100\" type=\"submit\"\n                      @click.debounce.500ms=\"submitChallenge()\"\n                  >\n                    Submit\n                  </button>\n                \n              </div>\n            </div>\n\n            <div class=\"row notification-row\">\n              <div class=\"col-12\">\n                <template x-if=\"response\">\n                  \n                  <div class=\"alert text-center w-100 mt-3\"\n                      :class=\"{\n                        'alert-success': response.data.status == 'correct',\n                        'alert-info': response.data.status == 'already_solved',\n                        'alert-danger': response.data.status == 'incorrect',\n                      }\" role=\"alert\"\n                  >\n                    <strong x-text=\"response.data.message\"></strong>\n                    <div x-show=\"(response.data.status == 'correct' || response.data.status == 'already_solved')\">\n                      <div x-show=\"getNextId()\">\n                        <button @click=\"nextChallenge()\" class=\"btn btn-info mt-3\">\n                          Next Challenge\n                        </button>\n                      </div>\n                      \n                    </div>\n                  </div>\n                </template>\n              </div>\n            </div>\n          </div>\n\n          <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"solves\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <table class=\"table table-striped align-middle text-center\">\n                  <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Date</th>\n                  </tr>\n                  </thead>\n                  <tbody id=\"challenge-solves-names\">\n                  <template x-for=\"solve in solves\">\n                    <tr>\n                      <td>\n                        <a :href=\"solve.account_url\" x-text=\"solve.name\"></a>\n                      </td>\n                      <td x-text=\"solve.date\"></td>\n                    </tr>\n                  </template>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"}}
