{"success": true, "data": {"id": 3, "name": "Salty Hash", "value": 800, "description": "Welcome to the **Salted MD5 Hash Challenge**! In this challenge, you'll need to reverse a salted MD5 hash by identifying the correct salt and plaintext input. This will test your ability to efficiently iterate through potential values and apply hashing techniques.\n\n### **What is MD5 Hashing?**\nMD5 (**Message-Digest Algorithm 5**) is a cryptographic hash function that takes an input (a string, file, etc.) and converts it into a unique **fixed-length 128-bit hash value** (usually represented as a 32-character hexadecimal number).  \n\nExample:  \n```\nInput: \"hello\" MD5 Hash: 5d41402abc4b2a76b9719d911017c592\n```\n\nHashes are **one-way functions**, meaning you **cannot directly reverse them** to get the original input. Instead, you have to **brute-force** potential inputs until you find a match.\n\n\n### **What is a Salt?**\nA **salt** is a random value added to an input before hashing to make it harder for attackers to crack hashes using precomputed tables (rainbow tables).  \n\nFor example, instead of hashing `\"password\"`, we might hash `\"randomSaltpassword\"`. This makes it much more difficult to guess the original value just by looking up `\"password\"` in a hash database.\n\nIn this challenge, the MD5 hash was created using **an unknown salt** combined with a **hidden plaintext phrase**. Your task is to determine the correct salt and plaintext by hashing possible combinations and finding a match.\n\n---\n\n\n---\n\n## **Challenge Description**\n\nYou are provided with an MD5 hash that was generated using an known **salt** combined with a **mystery flag**. Your goal is to determine the correct phrase and salt by hashing possible combinations and finding a match.\n\nTo make things easier (or harder), you are given a file containing a **list of possible salt puns** that may have been used as the salt.\n\n---\n\n## **Getting Started**\n\n### **Provided Files**\n- `salt_puns.txt` \u2013 A long list of possible flags to go within plaintext (all terrible puns \ud83d\ude08).\n\n### **Your Objective**\nFind the correct plaintext and salt that were used to generate the hash. The final **plaintext** should reveal a **flag** in the format:\n\n```\nwecehacksctf{FLAG}\n```\n\n---\n\n## **Hints**\n1. **MD5 Hashing**  \n  - MD5 is a simple hashing algorithm but **irreversible** without brute force.\n  - Since this hash is **salted**, you need to **append** or **prepend** the correct salt to the plaintext before hashing.\n\n2. **Salted Hash Format**  \n  - The hash was generated using:\n    ```\n    md5(salt + plaintext)\n    ```\n    or possibly:\n    ```\n    md5(plaintext + salt)\n    ```\n  - Your script should try **both** formats.\n\n3. **Using the Provided Salt List**  \n  - The `salt_puns.txt` file contains potential salts.\n  - You will need to iterate through each salt and test it.\n\n---\n\n## **Steps to Solve the Challenge**\n\n1. **Iterate Through Possible Salts**  \n  - Open `salt_puns.txt` and test each entry.\n\n2. **Hash Each Combination**  \n  - For each salt, try hashing:\n    ```python\n    salt = \"saltysalt\"\n    salt + wecehacksctf{plaintext}\n    ```\n    and\n    ```python\n    wecehacksctf{plaintext} + salt\n    ```\n\n3. **Compare Against Target Hash**  \n  - If a match is found, you\u2019ve successfully reversed the salted hash.\n\n4. **Extract the Flag**  \n  - The correct flag will be in the format:\n    ```\n    wecehacksctf{...}\n    ```\n\n---\n\n## **Starter Code**\n\nYour starter code is in the main.py file!\n\nHappy decoding and good luck!!! \ud83c\udf89\n", "connection_info": null, "next_id": null, "category": "Cryptography", "state": "visible", "max_attempts": 0, "type": "standard", "type_data": {"id": "standard", "name": "standard", "templates": {"create": "/plugins/challenges/assets/create.html", "update": "/plugins/challenges/assets/update.html", "view": "/plugins/challenges/assets/view.html"}, "scripts": {"create": "/plugins/challenges/assets/create.js", "update": "/plugins/challenges/assets/update.js", "view": "/plugins/challenges/assets/view.js"}}, "solves": 2, "solved_by_me": false, "attempts": 0, "files": ["/files/74b45c7f8bbca05ff4d160583e150f57/main.py", "/files/e5931fc6b58090e3a824bd91ae9ea4e4/salt_puns.txt"], "tags": [], "hints": [], "view": "<div :class=\"getStyles()\" role=\"document\" x-data=\"Challenge\" x-init=\"id = 3; max_attempts = 0; attempts = 0\">\n  <div class=\"modal-content\">\n    <div class=\"modal-body py-4 px-4 px-sm-5\">\n\n      <div>\n        <button type=\"button\" class=\"btn-close float-end\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n\n        <ul class=\"nav nav-tabs\">\n          <li class=\"nav-item\">\n            <button class=\"nav-link active\" data-bs-target=\"#challenge\" @click=\"showChallenge()\">\n              Challenge\n            </button>\n          </li>\n\n          \n            <li class=\"nav-item\">\n              <button class=\"nav-link challenge-solves\" data-bs-target=\"#solves\" @click=\"showSolves()\">\n                \n                  2 Solves\n                \n              </button>\n            </li>\n          \n        </ul>\n      </div>\n\n      <div>\n        <div class=\"tab-content\">\n          <div role=\"tabpanel\" class=\"tab-pane fade show active\" id=\"challenge\">\n            <h2 class=\"challenge-name text-center pt-3\">\n              Salty Hash\n            </h2>\n            <h3 class=\"challenge-value text-center\">\n              800\n            </h3>\n\n\n            \n\n            <span class=\"challenge-desc\"><p>Welcome to the <strong>Salted MD5 Hash Challenge</strong>! In this challenge, you'll need to reverse a salted MD5 hash by identifying the correct salt and plaintext input. This will test your ability to efficiently iterate through potential values and apply hashing techniques.</p>\n<h3><strong>What is MD5 Hashing?</strong></h3>\n<p>MD5 (<strong>Message-Digest Algorithm 5</strong>) is a cryptographic hash function that takes an input (a string, file, etc.) and converts it into a unique <strong>fixed-length 128-bit hash value</strong> (usually represented as a 32-character hexadecimal number).</p>\n<p>Example:</p>\n<pre><code>Input: &quot;hello&quot; MD5 Hash: 5d41402abc4b2a76b9719d911017c592\n</code></pre>\n<p>Hashes are <strong>one-way functions</strong>, meaning you <strong>cannot directly reverse them</strong> to get the original input. Instead, you have to <strong>brute-force</strong> potential inputs until you find a match.</p>\n<h3><strong>What is a Salt?</strong></h3>\n<p>A <strong>salt</strong> is a random value added to an input before hashing to make it harder for attackers to crack hashes using precomputed tables (rainbow tables).</p>\n<p>For example, instead of hashing <code>&quot;password&quot;</code>, we might hash <code>&quot;randomSaltpassword&quot;</code>. This makes it much more difficult to guess the original value just by looking up <code>&quot;password&quot;</code> in a hash database.</p>\n<p>In this challenge, the MD5 hash was created using <strong>an unknown salt</strong> combined with a <strong>hidden plaintext phrase</strong>. Your task is to determine the correct salt and plaintext by hashing possible combinations and finding a match.</p>\n<hr />\n<hr />\n<h2><strong>Challenge Description</strong></h2>\n<p>You are provided with an MD5 hash that was generated using an known <strong>salt</strong> combined with a <strong>mystery flag</strong>. Your goal is to determine the correct phrase and salt by hashing possible combinations and finding a match.</p>\n<p>To make things easier (or harder), you are given a file containing a <strong>list of possible salt puns</strong> that may have been used as the salt.</p>\n<hr />\n<h2><strong>Getting Started</strong></h2>\n<h3><strong>Provided Files</strong></h3>\n<ul>\n<li><code>salt_puns.txt</code> \u2013 A long list of possible flags to go within plaintext (all terrible puns \ud83d\ude08).</li>\n</ul>\n<h3><strong>Your Objective</strong></h3>\n<p>Find the correct plaintext and salt that were used to generate the hash. The final <strong>plaintext</strong> should reveal a <strong>flag</strong> in the format:</p>\n<pre><code>wecehacksctf{FLAG}\n</code></pre>\n<hr />\n<h2><strong>Hints</strong></h2>\n<ol>\n<li><strong>MD5 Hashing</strong></li>\n</ol>\n<ul>\n<li>MD5 is a simple hashing algorithm but <strong>irreversible</strong> without brute force.</li>\n<li>Since this hash is <strong>salted</strong>, you need to <strong>append</strong> or <strong>prepend</strong> the correct salt to the plaintext before hashing.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Salted Hash Format</strong></li>\n</ol>\n<ul>\n<li>The hash was generated using:\n<pre><code>md5(salt + plaintext)\n</code></pre>\nor possibly:\n<pre><code>md5(plaintext + salt)\n</code></pre>\n</li>\n<li>Your script should try <strong>both</strong> formats.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Using the Provided Salt List</strong></li>\n</ol>\n<ul>\n<li>The <code>salt_puns.txt</code> file contains potential salts.</li>\n<li>You will need to iterate through each salt and test it.</li>\n</ul>\n<hr />\n<h2><strong>Steps to Solve the Challenge</strong></h2>\n<ol>\n<li><strong>Iterate Through Possible Salts</strong></li>\n</ol>\n<ul>\n<li>Open <code>salt_puns.txt</code> and test each entry.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Hash Each Combination</strong></li>\n</ol>\n<ul>\n<li>For each salt, try hashing:\n<pre><code class=\"language-python\">salt = &quot;saltysalt&quot;\nsalt + wecehacksctf{plaintext}\n</code></pre>\nand\n<pre><code class=\"language-python\">wecehacksctf{plaintext} + salt\n</code></pre>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Compare Against Target Hash</strong></li>\n</ol>\n<ul>\n<li>If a match is found, you\u2019ve successfully reversed the salted hash.</li>\n</ul>\n<ol start=\"4\">\n<li><strong>Extract the Flag</strong></li>\n</ol>\n<ul>\n<li>The correct flag will be in the format:\n<pre><code>wecehacksctf{...}\n</code></pre>\n</li>\n</ul>\n<hr />\n<h2><strong>Starter Code</strong></h2>\n<p>Your starter code is in the main.py file!</p>\n<p>Happy decoding and good luck!!! \ud83c\udf89</p>\n</span>\n\n            \n\n            \n\n            \n              <div class=\"row challenge-files text-center pb-3\">\n                \n                  <div class=\"col-md-4 col-sm-4 col-xs-12 file-button-wrapper d-block\">\n                    \n                    \n                    \n                      \n                    \n                    <a\n                        class=\"btn btn-info btn-file mb-1 d-inline-block px-2 w-100 text-truncate\"\n                        href=\"/files/74b45c7f8bbca05ff4d160583e150f57/main.py\"\n                        title=\"main.py\"\n                    >\n                      <i class=\"fas fa-download\"></i>\n                      <small>\n                        main.py\n                      </small>\n                    </a>\n                  </div>\n                \n                  <div class=\"col-md-4 col-sm-4 col-xs-12 file-button-wrapper d-block\">\n                    \n                    \n                    \n                      \n                    \n                    <a\n                        class=\"btn btn-info btn-file mb-1 d-inline-block px-2 w-100 text-truncate\"\n                        href=\"/files/e5931fc6b58090e3a824bd91ae9ea4e4/salt_puns.txt\"\n                        title=\"salt_puns.txt\"\n                    >\n                      <i class=\"fas fa-download\"></i>\n                      <small>\n                        salt_puns.txt\n                      </small>\n                    </a>\n                  </div>\n                \n              </div>\n            \n\n            <template x-if=\"max_attempts > 0\">\n              <p class=\"text-center\">\n                <span x-text=\"attempts\"></span>/<span x-text=\"max_attempts\"></span> attempts\n              </p>\n            </template>\n\n            <div class=\"row submit-row\">\n              <div class=\"col-12 col-sm-8\">\n                \n                  <input\n                      id=\"challenge-id\" class=\"challenge-id\" type=\"hidden\"\n                      value=\"3\"\n                  >\n                  <input\n                      id=\"challenge-input\" class=\"challenge-input form-control\"\n                      type=\"text\" name=\"submission\"\n                      @keyup.enter=\"submitChallenge()\"\n                      placeholder=\"Flag\" x-model=\"submission\"\n                  >\n                \n              </div>\n\n              <div class=\"col-12 col-sm-4 mt-3 mt-sm-0 key-submit\">\n                \n                  <button\n                      id=\"challenge-submit\"\n                      class=\"challenge-submit btn btn-outline-secondary w-100 h-100\" type=\"submit\"\n                      @click.debounce.500ms=\"submitChallenge()\"\n                  >\n                    Submit\n                  </button>\n                \n              </div>\n            </div>\n\n            <div class=\"row notification-row\">\n              <div class=\"col-12\">\n                <template x-if=\"response\">\n                  \n                  <div class=\"alert text-center w-100 mt-3\"\n                      :class=\"{\n                        'alert-success': response.data.status == 'correct',\n                        'alert-info': response.data.status == 'already_solved',\n                        'alert-danger': response.data.status == 'incorrect',\n                      }\" role=\"alert\"\n                  >\n                    <strong x-text=\"response.data.message\"></strong>\n                    <div x-show=\"(response.data.status == 'correct' || response.data.status == 'already_solved')\">\n                      <div x-show=\"getNextId()\">\n                        <button @click=\"nextChallenge()\" class=\"btn btn-info mt-3\">\n                          Next Challenge\n                        </button>\n                      </div>\n                      \n                    </div>\n                  </div>\n                </template>\n              </div>\n            </div>\n          </div>\n\n          <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"solves\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <table class=\"table table-striped align-middle text-center\">\n                  <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Date</th>\n                  </tr>\n                  </thead>\n                  <tbody id=\"challenge-solves-names\">\n                  <template x-for=\"solve in solves\">\n                    <tr>\n                      <td>\n                        <a :href=\"solve.account_url\" x-text=\"solve.name\"></a>\n                      </td>\n                      <td x-text=\"solve.date\"></td>\n                    </tr>\n                  </template>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"}}
